// ************** ./Broker.h **************
def INT { n32 "value" }
def TMP { n32 "tmp" }
def DATA { 100 n8 hex "data" }
def STRING { buf 100 zterm asc "data" }
map bool
{
   "false" .
   "true"  .
}
// ************** ./Log.h **************
map LOG_LEVELS
{
	"TRACE_MAXIMUM" 1
	"TRACE_MEDIUM" 2
	"TRACE_MINIMUM" 3
	"TRACE_PROTOCOL" 4

	"CONFIG" 5
	"DETAIL" 6
	"INFO" 7
	"AUDIT" 8
	"WARNING" 9
	"ERROR" 10
	"SEVERE" 11
	"FATAL" 12
}
def trace_settings_type
{
   n32 map LOG_LEVELS "log_level"
   n32 dec "max_log_entries"
   n32 map LOG_LEVELS "trace_level"
   n32 dec "max_trace_entries"
   n32 dec "trace_output_level"
   n32 dec "isservice"
}
// ************** ./SubsEngine.h **************
// ************** ./LinkedList.h **************
defm defList(T)

def T concat Item
{
	at 4
	n32 ptr T concat Item suppress "next"
	at 0
	n32 ptr T concat Item suppress "prev"
	at 8
	n32 ptr T id2str(T)
	at 12
	n32 suppress "size"
}

def T concat List
{
	n32 ptr T concat Item suppress "first"
	n32 ptr T concat Item suppress "last"
	n32 ptr T concat Item suppress "current"
	n32 dec "count"
	n32 suppress "size"
}
endm

defList(INT)
defList(STRING)
defList(TMP)

// ************** ./Tree.h **************
map TREE_BITS
{
	"heap_tracking" 1 : .
	"allow_duplicates" 2 : .
}
 
defm defTree(T) // macro to define a tree

def T concat Node
{
	n32 ptr T concat Node "parent"
	n32 ptr T concat Node "left"
	n32 ptr T concat Node "right"
	n32 ptr T id2str(T)
	n32 suppress "size"
	n32 dec suppress "red"
}

def T concat TreeIndex
{
	n32 ptr T concat Node suppress "root"
	n32 ptr DATA suppress "compare"
}

def T concat Tree
{
	2 T concat TreeIndex "index"
	n32 dec "indexes"
	n32 dec "count"
	n32 dec suppress "size"
	n32 map TREE_BITS "bits"
}

endm

defTree(INT)
defTree(STRING)
defTree(TMP)

def SUBSCRIPTIONS
{
	n32 ptr STRING open "clientName"
	n32 ptr STRING open "topicName"
	n32 dec "qos"
	n32 map bool "noLocal"
	n32 map bool "durable"
	n32 dec "priority"
	n32 map bool "wildcards"
}
def RETAINEDPUBLICATIONS
{
	n32 ptr STRING open "topicName"
	n32 dec "qos"
	n32 ptr DATA open "payload"
	n32 dec "payloadlen"
}

defList(SUBSCRIPTIONS)
defTree(RETAINEDPUBLICATIONS)
defTree(SUBSCRIPTIONSList)

def SUBSCRIPTIONENGINES
{
	n32 ptr SUBSCRIPTIONSListTree open "subs"
	n32 ptr SUBSCRIPTIONSList open "wsubs"
	n32 ptr RETAINEDPUBLICATIONSTree open "retaineds"
	n32 dec "retained_changes"
	struct
	{
		n32 ptr SUBSCRIPTIONSList open "system_subs"
		n32 ptr RETAINEDPUBLICATIONSTree open "system_retaineds"
	}
}
// ************** ./Bridge.h **************
// ************** ./Clients.h **************
// ************** ./Users.h **************
map permission
{
   "full" .
   "write" .
   "read"  .
}
def RULE
{
   n32 ptr STRING open "topic"
   n32 map permission "permission"
}
defList(RULE)
def USER
{
   n32 ptr STRING open "username"
   n32 ptr STRING open "password"
   n32 ptr RULEList open "acl"
}
defList(USER)
map PROTOCOLS
{
   "mqtt" .
   "mqtts" .
}
def PUBLICATIONS
{
   n32 ptr STRING open "topic"
   n32 ptr DATA "payload"
   n32 dec "payloadlen"
   n32 dec "refcount"
}
// This should get moved to MQTTProtocol, but the includes don't quite work yet
map MESSAGE_TYPES
{
   "PUBREC" 5
   "PUBREL" .
   "PUBCOMP" .
}


def MESSAGES
{
   n32 dec "qos"
   n32 map bool "retain"
   n32 dec "msgid"
   n32 ptr PUBLICATIONS "publish"
$ifdef WIN32
   n64 time "lastTouch"
$else
   n32 time "lastTouch"
$endif
   n8 map MESSAGE_TYPES "nextMessageType"
   n32 dec "len"
}
defList(MESSAGES)
def WILLMESSAGES
{
   n32 ptr STRING open "topic"
   n32 ptr DATA open "msg"
   n32 dec "retained"
   n32 dec "qos"
}
$ifdef MQTTS
def REGISTRATION
{
   n32 dec "id"
   n32 ptr STRING open "topicName"
}
defList(REGISTRATION)
def PENDINGREGISTRATION
{
   n32 ptr REGISTRATION "registration"
   n32 dec "msgId"
$ifdef WIN32
   n64 time "sent"
$else
   n32 time "sent"
$endif
}
$ifndef NO_BRIDGE
def PENDINGSUBSCRIPTION
{
   n32 ptr STRING open "topicName"
   n32 dec "qos"
   n32 dec "msgId"
$ifdef WIN32
   n64 time "sent"
$else
   n32 time "sent"
$endif
}
$endif
$endif
$endif
map CLIENT_BITS
{
	"cleansession" 1 : .
	"connected" 2 : .
	"good" 4 : .
	"outbound"  8 : .
	"noLocal" 16 : .
	"ping_outstanding" 32 : .
	"closing" 64 : .
	"connect_state" 128 : .
}
def CLIENTS
{
	n32 dec suppress "socket"
	n32 ptr STRING open suppress "addr"
	n32 ptr STRING open "clientID"
	n32 ptr USER suppress "user"
	n32 ptr STRING open suppress "username (outbound)"
	n32 ptr STRING open suppress "password (outbound)"
	n32 map CLIENT_BITS "bits"
	n32 dec suppress "msgID"
	n32 dec suppress "keepAliveInterval"
	n32 ptr BRIDGECONNECTIONS suppress "bridge_context"
$ifdef WIN32
	n64 time suppress "lastContact"
$else
	n32 time suppress "lastContact"
$endif
	n32 ptr WILLMESSAGES suppress "will"
	n32 ptr MESSAGESList open suppress "inboundMsgs"
	n32 ptr MESSAGESList open suppress "outboundMsgs"
	3 n32 ptr MESSAGESList open suppress "queuedMsgs"
	n32 dec suppress "discardedMsgs"
$ifdef MQTTS
	n32 map PROTOCOLS "protocol"
	n32 ptr REGISTRATIONList open suppress "registrations"
	n32 ptr PENDINGREGISTRATION suppress "pendingRegistration"
$ifndef NO_BRIDGE
	n32 ptr PENDINGSUBSCRIPTION suppress "pendingSubscription"
$endif
$endif
}

defList(CLIENTS)

// ************** ./MQTTPacket.h **************
// ************** ./Socket.h **************
def SOCKADDR_IN
{
	// TODO: will be different sizes on some platforms
	16 n8 "sockaddr"
}
def SOCKADDR_IN6
{
	// TODO: will be different sizes on some platforms
	28 n8 "sockaddr6"
}
$ifndef SINGLE_LISTENER
def CONNECTION
{
	n32 dec "socket"
}
defList(CONNECTION)

def LISTENER
{
	n32 dec "socket"
	SOCKADDR_IN "addr"
	SOCKADDR_IN6 "addr6"
	n32 map bool "ipv6"
	n32 map PROTOCOLS "protocol"
	n32 ptr STRING open "address"
	n32 dec "port"
	n32 ptr CONNECTIONList open "connections"
	n32 signed dec "max_connections"
	n32 ptr STRING "mount_point"
$ifdef MQTTS
	n32 ptr STRINGList open "multicast_groups"
	n32 ptr ADVERTISE_PARMS "advertise"
	n32 dec "loopback"
$endif
}
defList(LISTENER)
$endif
def NEWSOCKET
{
	n32 dec "socket"
	$ifdef WIN32
		n64 time "opened"
	$else
		n32 time "opened"
	$endif
	n32 dec "outbound"
}
defList(NEWSOCKET)
$endif
 
def EPOLL_DATA union
{
  n32 ptr VOID "ptr"
  n32 dec "fd"
  n32 dec "u32"
  n64 dec "u64"
} 

def EPOLL_EVENT
{
  n32 hex "events"
  EPOLL_DATA "data"
}

def FD_SET
{
   128 n8 "data"
}

def SOCKETS
{
$ifndef SINGLE_LISTENER
	n32 ptr LISTENERList open "listeners"
$else
	n32 dec "mySocket"
	n32 dec "port"
	SOCKADDR_IN "addr"
	SOCKADDR_IN6 "addr6"
	n32 dec "ipv6"
$endif
$ifdef USE_POLL
	n32 dec "epoll_fds"
	n32 ptr INTTree open "fds_tree"
	25 EPOLL_EVENT "events"
	n32 dec "no_ready"
	n32 dec "cur_sds"
$else
	FD_SET "rset"
	FD_SET "rset_saved"
	n32 dec "maxfdp1"
	n32 ptr INTList "clientsds"
	n32 ptr INTItem "cur_clientsds"
	FD_SET "pending_wset"
	n32 ptr INTList "connect_pending"
	n32 ptr INTList "write_pending"
$endif
	n32 ptr NEWSOCKETList open "newsockets"
}
// ************** ./MQTTProtocol.h **************
map CONNACK_RETURN_CODES
{
   "CONNACK_CONNECTION_ACCEPTED" .
   "CONNACK_UNACCEPTABLE_PROTOCOL_VERSION" .
   "CONNACK_IDENTIFIER_REJECTED" .
   "CONNACK_BROKER_UNAVAILABLE" .
   "CONNACK_BAD_USERNAME_OR_PASSWORD" .
   "CONNACK_NOT_AUTHORIZED" .
   "CONNACK_NONE_RECEIVED" 99
}


def PENDING_WRITE
{
	n32 dec "socket"
	n32 ptr PUBLICATIONS open "publication"
	n32 ptr CLIENTS open "client"
}

defList(PUBLICATIONS)
defList(PENDING_WRITE)

def MQTTPROTOCOL
{
	PUBLICATIONSList "publications"
	PENDING_WRITEList "pending_writes"
}

map BRIDGE_TOPIC_DIRECTION
{
   "both" .
   "in" .
   "out" .
}

def BRIDGETOPICS
{
   n32 ptr STRING open "pattern"
   n32 ptr STRING open "localPrefix"
   n32 ptr STRING open "remotePrefix"
   n32 map BRIDGE_TOPIC_DIRECTION "direction"
$ifdef MQTTS
   n32 map bool "subscribed"
$endif
}
defList(BRIDGETOPICS)
map START_TYPES
{
	"START_AUTOMATIC" .
	"START_MANUAL" .
	"START_LAZY" .
	"START_ONCE" .
}
map RUN_STATE
{
	"CONNECTION_STOPPED" .
	"CONNECTION_RUNNING" .
	"CONNECTION_STOPPING" .
	"CONNECTION_STOPPING_THEN_DELETE" .
	"CONNECTION_DELETE" .
	"CONNECTION_SWITCHING" .
}
def BRIDGECONNECTIONS
{
	n32 ptr STRING open "name"
	n32 ptr STRINGList open "addresses"
	n32 ptr STRINGItem open "cur_address"
	n32 map bool "round_robin"
	n32 map bool "try_private"
	n32 map CONNACK_RETURN_CODES "last_connect_result"
	n32 map bool "notifications"
	n32 map START_TYPES "start_type"
	n32 map bool "stop_was_manual"
	n32 dec "cleansession"
	n32 dec "no_successful_connections"
	n32 ptr STRING open "notification_topic"
	n32 dec "keepalive_interval"
	n32 dec "inbound_filter"
	n32 ptr BRIDGETOPICSList open "topics"
	expr "topics->count" dec "number of topics"
	n32 ptr CLIENTS "primary"
	n32 ptr CLIENTS "backup"
	n32 dec "threshold"
    n32 dec "idle_timeout"
    n32 map RUN_STATE "state"
$ifdef MQTTS
    n32 map PROTOCOLS "protocol"
    n32 map bool "completed_subscriptions"
    n32 dec "loopback"
$endif
	n32 ptr STRING open "username"
	n32 ptr STRING open "password"
	n32 ptr STRING open "clientid"
}
defList(BRIDGECONNECTIONS)
def BRIDGES
{
	n32 ptr BRIDGECONNECTIONSList open "connections"
}
map BROKER_RUN_STATE {
  "BROKER_STOPPED" .
  "BROKER_RUNNING" .
  "BROKER_STOP_REQUESTED" .
  "BROKER_STOPPING" .
}

defTree(CLIENTS)

def BROKERSTATES
{
   n32 ptr STRING open "version"
   n32 ptr STRING open "build_timestamp"
   n32 dec "max_inflight_messages"
   n32 dec "max_queued_messages"
   n32 dec "retry_interval"
   n32 ptr CLIENTSTree open "clients"
   n32 ptr CLIENTSTree open "disconnected_clients"
$ifdef MQTTS
   n32 ptr CLIENTSTree open "mqtts_clients"
   n32 ptr CLIENTSTree open "disconnected_mqtts_clients"
$endif
$ifndef MQTTCLIENT
   n32 dec "connection_messages"
   n32 ptr SUBSCRIPTIONENGINES "SubscriptionEngine"
   n32 map BROKER_RUN_STATE "state"
   n32 dec "hup_signal"
   n32 ptr STRING open "ffdc_location"
   n32 dec "ffdc_count"
   n32 ptr STRING open "persistence_location"
   n32 dec "persistence"
   n32 map bool "autosave_on_changes"
   n32 dec "autosave_interval"
$ifdef WIN32
   n64 time "last_autosave"
$else
   n32 time "last_autosave"
$endif
   n32 ptr STRINGList open "clientid_prefixes"
   BRIDGES "bridge"
$ifdef SINGLE_LISTENER
   n32 dec "port"
   n32 ptr STRING open "bind_address"
   n32 dec "max_connections"
   n32 map bool "ipv6"
$else
   n32 ptr LISTENERList open "listeners"
$endif
   n32 ptr STRING open "password_file"
   n32 ptr USERList open "users"
   n32 ptr STRING open "acl_file"
   n32 map bool "allow_anonymous"
   n32 ptr RULEList open "defaultACL"
   n32 dec "msgs_received"
   n32 dec "msgs_sent"
   n32 unsigned dec "bytes_received"
   n32 unsigned dec "bytes_sent"
$ifdef WIN32
   n64 time "start_time"
$else
   n32 time "start_time"
$endif
$endif
$ifdef MQTTS
	n32 dec "max_mqtts_packet_size"
$endif
}
def main
{
   BROKERSTATES "Broker States"
   n32 ptr STRING open "Config file"
   SOCKETS "sockets"
   MQTTPROTOCOL "MQTTProtocol"
}
